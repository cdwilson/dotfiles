# SPDX-FileCopyrightText: Chris Wilson <christopher.david.wilson@gmail.com>
#
# SPDX-License-Identifier: MIT

# Login script for Bourne-compatible shells

# shellcheck shell=sh

# ------------------------------------------------------------------------------
# Debug info
# ------------------------------------------------------------------------------

export PROFILE_WAS_SOURCED=1

# ------------------------------------------------------------------------------
# Set ENV if bash is invoked as sh
# ------------------------------------------------------------------------------

# When invoked as an interactive shell with the name sh, Bash looks for the
# variable ENV, expands its value if it is defined, and uses the expanded value
# as the name of a file to read and execute. For more details, see
# https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html

if [ -r "${HOME}/.shrc" ]; then
    export ENV="${HOME}/.shrc"
fi

# ------------------------------------------------------------------------------
# Source shell functions
# ------------------------------------------------------------------------------

if [ -r "${HOME}/.sh_functions" ]; then
    # shellcheck source=dot_sh_functions
    . "${HOME}/.sh_functions"
fi

# ------------------------------------------------------------------------------
# User paths
# ------------------------------------------------------------------------------

# Note: this is currently the uv installation path for installed tools
if [ -d "${HOME}/.local/bin" ] ; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi

# copied from Ubuntu .profile
if [ -d "${HOME}/bin" ] ; then
    export PATH="${HOME}/bin:${PATH}"
fi

# ------------------------------------------------------------------------------
# Homebrew
# ------------------------------------------------------------------------------

case $(os_type) in
    linux*)
        if executable_exists "${HOME}/.linuxbrew/bin/brew"; then
            HOMEBREW_BIN="${HOME}/.linuxbrew/bin/brew"
        elif executable_exists "/home/linuxbrew/.linuxbrew/bin/brew"; then
            HOMEBREW_BIN="/home/linuxbrew/.linuxbrew/bin/brew"
        fi
        ;;
    darwin*)
        if cpu_is_apple_silicon && shell_is_native ; then
            if executable_exists "/opt/homebrew/bin/brew"; then
                HOMEBREW_BIN="/opt/homebrew/bin/brew"
            fi
        else
            if executable_exists "/usr/local/bin/brew"; then
                HOMEBREW_BIN="/usr/local/bin/brew"
            fi
        fi
        ;;
    *)
        ;;
esac

if [ -n "${HOMEBREW_BIN}" ]; then
    brew_shellenv=$("${HOMEBREW_BIN}" shellenv)
    eval "${brew_shellenv}"
fi

# ------------------------------------------------------------------------------
# Shell
# ------------------------------------------------------------------------------

# On macOS, the default login shell is zsh (i.e. $SHELL = /bin/zsh).  If the
# terminal is configured to run a different shell (e.g. bash installed by
# homebrew), the value of the environment variable $SHELL won't match the shell
# started by the terminal. Some tools (like bash completion, tmux, screen, etc)
# rely on the login shell ($SHELL) so it needs to match the shell started by the
# terminal.  If the login shell is not changed in the macOS system preferences
# to match the shell started by the terminal, make sure to uncomment the code
# below to ensure $SHELL is set correctly.
#
# Also, remember to add your login shell to the file /etc/shells, otherwise it
# will be impossible to use AppleScript to tell Terminal to execute scripts
# (like 'osascript -e "tell application \"Terminal\" to do script \"echo
# hello\""').
# See https://trac.macports.org/wiki/howto/bash-completion

# case $(os_type) in
#     darwin*)
#         # Homebrew Bash
#         if executable_exists brew; then
#             export SHELL="${HOMEBREW_PREFIX}/bin/bash"
#         fi
#         ;;
#     *)
#         ;;
# esac

# ------------------------------------------------------------------------------
# pkg-config
# ------------------------------------------------------------------------------

# Homebrew pkg-config
if executable_exists brew; then
    PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig"
    export PKG_CONFIG_PATH
fi

# ------------------------------------------------------------------------------
# libffi
# ------------------------------------------------------------------------------

# libffi is keg-only, which means it was not symlinked into /usr/local,
# because some formulae require a newer version of libffi.
#
# For compilers to find libffi you may need to set:
#   export LDFLAGS="-L/usr/local/opt/libffi/lib"
#
# For pkg-config to find libffi you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
if executable_exists brew; then
    PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$(brew --prefix libffi)/lib/pkgconfig"
    export PKG_CONFIG_PATH
fi

# ------------------------------------------------------------------------------
# pip
# ------------------------------------------------------------------------------

# ensure packages installed by pip are always installed in a virtual environment
export PIP_REQUIRE_VIRTUALENV=true

# ------------------------------------------------------------------------------
# rbenv
# ------------------------------------------------------------------------------

# Manually set RBENV_ROOT for rbenv installed manually via Basic GitHub Checkout
# https://github.com/rbenv/rbenv#basic-github-checkout
export RBENV_ROOT="${HOME}/.rbenv"

if [ -d "${RBENV_ROOT}" ]; then
    export PATH="${RBENV_ROOT}/bin:${PATH}"
    # Don't use `rbenv init -` directly because it doesn't support --path like
    # pyenv does. Instead, remove any lines that don't set the PATH and then
    # eval. Then, do the rest of the shell initialization in the interactive
    # initialization file (e.g. ~/.bashrc).
    rbenv_init_path=$(rbenv init - | sed '/export PATH/!d')
    eval "${rbenv_init_path}"
fi

# ------------------------------------------------------------------------------
# Rust/Cargo
# ------------------------------------------------------------------------------

# Note: this is currently the uv installation path
if [ -r "${HOME}/.cargo/env" ]; then
    # shellcheck source=/dev/null
    . "${HOME}/.cargo/env"
fi

# ------------------------------------------------------------------------------
# Go
# ------------------------------------------------------------------------------

if executable_exists go; then
    gopath="$(go env GOPATH)"
    if [ -n "${gopath}" ]; then
        export PATH="${gopath}/bin:${PATH}"
    fi
fi

# ------------------------------------------------------------------------------
# Vagrant
# ------------------------------------------------------------------------------

export VAGRANT_DEFAULT_PROVIDER="parallels"
# export VAGRANT_DEFAULT_PROVIDER="vmware_fusion"
# export VAGRANT_VMWARE_CLONE_DIRECTORY="${HOME}/Virtual Machines"

# ------------------------------------------------------------------------------
# Perl local::lib
# ------------------------------------------------------------------------------

export PATH="${HOME}/perl5/bin${PATH:+:${PATH}}"
export PERL5LIB="${HOME}/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="${HOME}/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"${HOME}/perl5\""
export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"

# ------------------------------------------------------------------------------
# 1Password CLI
# ------------------------------------------------------------------------------

{{- if eq .chezmoi.os "darwin" }}
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
{{- else if eq .chezmoi.os "linux" }}
export SSH_AUTH_SOCK=~/.1password/agent.sock
{{- end }}

if [ -r "${HOME}/.config/op/plugins.sh" ]; then
    # shellcheck source=/dev/null
    . "${HOME}/.config/op/plugins.sh"
fi

# ------------------------------------------------------------------------------
# OrbStack
# ------------------------------------------------------------------------------

{{- if eq .chezmoi.os "darwin" }}
if [ -r "${HOME}/.orbstack/shell/init.bash" ]; then
    # shellcheck source=/dev/null
    . "${HOME}/.orbstack/shell/init.bash"
fi
{{- end }}

# ------------------------------------------------------------------------------
# OSS CAD Suite
# ------------------------------------------------------------------------------

if [ -d "${HOME}/.local/opt/oss-cad-suite" ] ; then
    export PATH="${HOME}/.local/opt/oss-cad-suite/bin:${PATH}"
fi

# ------------------------------------------------------------------------------
# Glasgow Interface Explorer
# ------------------------------------------------------------------------------

# Prioritizes using the system tools over the YoWASP tools
export GLASGOW_TOOLCHAIN="system,builtin"

# ------------------------------------------------------------------------------
# STM32Cube
# ------------------------------------------------------------------------------

export STM32_PRG_PATH="/Applications/STMicroelectronics/STM32Cube/STM32CubeProgrammer/STM32CubeProgrammer.app/Contents/MacOs/bin"
